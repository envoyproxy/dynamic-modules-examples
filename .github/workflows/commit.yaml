name: Commit

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  rust:
    name: Rust Build and Test (${{ matrix.platform.arch }})
    runs-on: ${{ matrix.platform.os }}
    defaults:
      run:
        working-directory: ./rust
    strategy:
      fail-fast: false
      matrix:
        platform:
          - os: ubuntu-22.04
            arch: amd64
          - os: ubuntu-22.04-arm
            arch: arm64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache Cargo git index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-git-

      - name: Set up Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: clippy, rustfmt

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Run Clippy linter
        run: cargo clippy -- -D warnings

      - name: Build project
        run: cargo build --verbose

      - name: Run tests
        run: cargo test --verbose

  docker_build:
    name: Build and Push multi-arch Docker image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login into GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          # TODO: setup caches.
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ghcr.io/envoyproxy/dynamic-modules-examples:${{ github.sha }}

      - name: Push as latest
        if: github.event_name == 'push'
        run:
          docker tag ghcr.io/envoyproxy/dynamic-modules-examples:${{ github.sha }} ghcr.io/envoyproxy/dynamic-modules-examples:latest
          docker push ghcr.io/envoyproxy/dynamic-modules-examples:latest

  e2e_test:
    needs: [docker_build]
    name: E2E Test (${{ matrix.platform.arch }})
    runs-on: ${{ matrix.platform.os }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - os: ubuntu-22.04
            arch: amd64
          - os: ubuntu-22.04-arm
            arch: arm64

    steps:
    - run: echo 'TODO'
